Перем КонтекстЯдра;
Перем Утверждения;  
Перем РаботаСБД;


Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонтекстЯдра = КонтекстЯдраПараметр;
Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
РаботаСБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт                 
НаборТестов.НачатьГруппу("Тесты по сортировке", Истина);
НаборТестов.Добавить("ТестДолжен_ОтсортироватьЭлементыСправочникаПузырьком",, "Тест должен отсортировать массив пузырьковым методом");
НаборТестов.Добавить("ТестДолжен_ОтсортироватьЭлементыСправочникаСлиянием",, "Тест должен отсортировать массив методом слияния");

НаборТестов.НачатьГруппу("Тест по очистке элементов базы", Истина);
НаборТестов.Добавить("ТестДолжен_ОчиститьОбъект", НаборТестов.ПараметрыТеста("Справочник", "КурьерскаяСлужба2"), "Тест должен очистить справочник Курьерская служба2");

КонецПроцедуры        


Процедура ПередЗапускомТеста() Экспорт
НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
    Если ТранзакцияАктивна() Тогда
	    ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ТестДолжен_ОтсортироватьЭлементыСправочникаПузырьком() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурьерскиеСлужбы.СуммаДоставки КАК СуммаДоставки
	               |ИЗ
	               |	Справочник.КурьерскиеСлужбы КАК КурьерскиеСлужбы";
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСуммДост = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивСуммДост.Добавить(Выборка.СуммаДоставки);
	КонецЦикла; 
	
	// сортируем массив пузырьковым методом
    Для i = 0 По МассивСуммДост.ВГраница() Цикл
        Для j = 0 ПО МассивСуммДост.Вграница() - i - 1 Цикл
            Если МассивСуммДост[j] > МассивСуммДост[j + 1] Тогда
                Замена = МассивСуммДост[j];
                МассивСуммДост[j] = МассивСуммДост[j + 1];
                МассивСуммДост[j + 1] = Замена;
            КонецЕсли;            
        КонецЦикла;        
	КонецЦикла;    
	
	Для i = 0 По МассивСуммДост.ВГраница() - 1 Цикл 
		 сКур = Справочники.КурьерскаяСлужба2.СоздатьЭлемент();
	     сКур.Наименование = Строка("Служба" + i);
	     сКур.СуммаДоставки = Число(МассивСуммДост[i]);
	     сКур.Записать(); 
		 Утверждения.ПроверитьМеньшеИлиРавно(МассивСуммДост[i],МассивСуммДост[i+1], "Массив не отсортирован");      
		 Утверждения.ПроверитьНаличиеОбъектаИБ (Справочники.КурьерскаяСлужба2.НайтиПоНаименованию(сКур.Наименование, 1), "Справочник не создан");
	 КонецЦикла;  
	 
КонецПроцедуры

Процедура ТестДолжен_ОтсортироватьЭлементыСправочникаСлиянием() Экспорт  
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурьерскиеСлужбы.СуммаДоставки КАК СуммаДоставки
	               |ИЗ
	               |	Справочник.КурьерскиеСлужбы КАК КурьерскиеСлужбы";
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСуммДост = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивСуммДост.Добавить(Выборка.СуммаДоставки);
	КонецЦикла;
	
	// сортируем массив, обращаемся к функции
	СлитыйМассив = СортСлиянием(МассивСуммДост);
	
	Для i = 0 По СлитыйМассив.ВГраница() - 1 Цикл       
		 Спр = Справочники.КурьерскиеСлужбы.НайтиПоРеквизиту("СуммаДоставки", СлитыйМассив[i]); 
		 сКур = Справочники.КурьерскаяСлужба2.СоздатьЭлемент();
	     сКур.Наименование = Спр.Наименование;
	     сКур.СуммаДоставки = Число(СлитыйМассив[i]);
	     сКур.Записать(); 
		 Утверждения.ПроверитьМеньшеИлиРавно(СлитыйМассив[i],СлитыйМассив[i+1], "Массив не отсортирован");      
		 Утверждения.ПроверитьНаличиеОбъектаИБ (Справочники.КурьерскаяСлужба2.НайтиПоНаименованию(сКур.Наименование, 1), "Справочник не создан");
	 КонецЦикла;
 КонецПроцедуры 
 
Функция СортСлиянием(Массив) Экспорт
    Если Массив.Количество() = 1 Тогда
         Возврат Массив;
	 КонецЕсли; 
	// делим массив на два подмассива 
    Разрыв = Массив.Количество() / 2;
    Массив1 = Новый Массив;
    Массив2 = Новый Массив;   
	// заполняем подмассивы
    Для сч = 0 ПО Массив.ВГраница() Цикл
        Если сч < Разрыв Тогда
            Массив1.Добавить(Массив[сч]);
        Иначе
            Массив2.Добавить(Массив[сч]);
        КонецЕсли;
	КонецЦикла;
	
	// начинаем постепенное слияние, обращаемся к функциям
	Возврат Слияние(СортСлиянием(Массив1), СортСлиянием(Массив2));  
	
КонецФункции

Функция Слияние(м1, м2) Экспорт
    i = 0;
    j = 0;
    СлитыйМассив = Новый Массив;
    
    Для Сч = 0 По (м1.Количество() + м2.Количество()) - 1 Цикл
        СлитыйМассив.Добавить();
	КонецЦикла;          
	
    // заполняем массив, сравниваем элементы подмассивов
    Для a = 0 ПО (м1.Количество() + м2.Количество()) - 1 Цикл            
        Если (j <  м2.Количество()) И (i < м1.Количество()) Тогда            
            Если (м1[i] > м2[j]) И (j < м2.Количество()) Тогда
                СлитыйМассив[a] =  м2[j];
                j = j + 1;
            Иначе
                СлитыйМассив[a] =  м1[i];
                i = i + 1;
            КонецЕсли;             
        Иначе
            Если j < м2.Количество() Тогда
                СлитыйМассив[a] = м2[j];
                j = j + 1;
            Иначе
                СлитыйМассив[a] = м1[i];
                i = i + 1;
            КонецЕсли;            
        КонецЕсли;           
	КонецЦикла;
	
	Возврат СлитыйМассив;
	
КонецФункции
	

Процедура ТестДолжен_ОчиститьОбъект(Тип, Наименование) Экспорт
РаботаСБД.УдалитьЭлементыМетаданного(Тип, Наименование, Неопределено);
Кол = 0;
Если Тип = "Справочник" Тогда
	Кол = РаботаСБД.ПолучитьКоличествоЭлементовСправочникаПоОтбору(Наименование, Неопределено);
ИначеЕсли Тип = "Документ" Тогда
	Дата1 = Дата(0001, 01, 01);
	Дата2 = Дата(3999, 12, 01);
	Кол = РаботаСБД.ПолучитьКоличествоДокументовПоОтбору(Наименование, Дата1, Дата2, Неопределено);
КонецЕсли;
Утверждения.ПроверитьРавенство(Кол, 0, "Очистка объекта " + Наименование + " не выполнена.");
КонецПроцедуры;

